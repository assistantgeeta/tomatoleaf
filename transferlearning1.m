clear;
close all;
clc;
imgdata=imageDatastore('PlantVillage','IncludeSubfolders',true,'LabelSource','foldernames');
[imgtrain, imgvalidation]=splitEachLabel(imgdata,0.4,"randomized");
net=alexnet('Weights','none');
analyzeNetwork(net)
layerTransfer=net.Layers(1:end-3);
numclasses=numel(categories(imgtrain.Labels))
inputSize = net.Layers(1).InputSize
layers=[layerTransfer
        fullyConnectedLayer(numclasses,"WeightLearnRateFactor",20,"BiasLearnRateFactor",20)
        softmaxLayer
        classificationLayer];
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imgtrain, ...
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imgvalidation);
options = trainingOptions('sgdm', ...
    'MiniBatchSize',10, ...
    'MaxEpochs',6, ...
    'InitialLearnRate',1e-4, ...
    'Shuffle','every-epoch', ...c
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',3, ...
    'Verbose',false, ...
    'Plots','training-progress');
options = trainingOptions('sgdm', ...
    'MiniBatchSize',100, ...
    'MaxEpochs',10, ...
    'InitialLearnRate',0.001, ...
    'Shuffle','every-epoch', ...c
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',10, ...
    'Verbose',false, ...
    'Plots','training-progress');
netTransfer = trainNetwork(augimdsTrain,layers,options);
[YPred,scores] = classify(netTransfer,augimdsValidation);

idx = randperm(numel(imgvalidation.Files),9);
figure
for i = 1:9
    subplot(3,3,i)
    I = readimage(imgvalidation,idx(i));
    imshow(I)
    label = YPred(idx(i));
    title(string(label));
end
YValidation = imgvalidation.Labels;
YValidation
accuracy = mean(YPred == YValidation)

